version: '3'

services:
  my_zk:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: my_zk
    container_name: my_zk
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: my_zk:2888:3888
    # volumes:
    #   - ./volumns/zookeeper:/var/lib/zookeeper

  my_kafka_1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: my_kafka_1
    container_name: my_kafka_1
    ports:
      - "9092:9092"
      - "29092:29092"
      # - "9991:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://my_kafka_1:9092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "my_zk:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # KAFKA_JMX_PORT: 9999
      # KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      TOPIC_AUTO_CREATE : "true"
    depends_on:
      - my_zk
    # volumes:
    #   - ./volumns/kafka-1:/var/lib/kafka
    #   - ./volumns/kafka-1/stats.txt:/stats.txt

  my_dbzm:
    image: 'debezium/connect'
    hostname: my_dbzm
    container_name: my_dbzm
    ports:
      - 9095:8083
    environment:
     - BOOTSTRAP_SERVERS=my_kafka_1:9092
     - GROUP_ID=1
     - CONFIG_STORAGE_TOPIC=connect_configs
     - OFFSET_STORAGE_TOPIC=connect_offsets
     - CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL=http://my_schema_registry:8081
     - CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL=http://my_schema_registry:8081
     - CONNECT_CONFIG_STORAGE_TOPIC=delete
     - CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=1
     - CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=1 
     - CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=1
    depends_on:
      - my_zk
      - my_kafka_1
    volumes:
      - ./volume/dbzm/external:/dbzm_curls

  # my_schema_registry:
  #   image: confluentinc/cp-schema-registry:5.5.3
  #   hostname: my_schema_registry
  #   container_name: my_schema_registry
  #   environment:
  #     - SCHEMA_REGISTRY_HOST_NAME=my_schema_registry
  #     - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
  #     - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://my_kafka_1:9092
  #   ports:
  #     - 8081:8081
  #   depends_on:
  #     - my_zk
  #     - my_kafka_1
  #     - my_dbzm


  # COMPASS CONNECTION STRINGS
  # auth + 2-node    : mongodb://admin:admin@my_mongodb_1:27017,my_mongodb_2:27018/?replicaSet=rs0
  # no auth + 1-node : mongodb://my_mongodb_1:27017,my_mongodb_2:27018/?replicaSet=rs0
  # no-auth + 1-node : mongodb://my_mongodb_1:27017/?replicaSet=rs0
  # auth + 1-node    : mongodb://admin:admin@my_mongodb_1:27017/?replicaSet=rs0

  # SHELL COMMANDS
  # - with auth : mongo --port 27017 -u "admin" -p "admin" --authenticationDatabase "admin"
  # - without auth : mongo

  # MONGO SHELL COMMANDS
  # rs.slaveOk()  -> start making quey
  # rs.initiate() -> init rs
  # use local     -> "oplog.rs" collection is inside "local" DB
  # db.oplog.rs.find()  -> query "oplog.rs"

  # random
  # db.addUser({
  #     user: 'my_oplog_user',
  #     pwd: 'my_oplog_pass',
  #     roles: [{"role": "readAnyDatabase", "db": "local"}]
  # })

  


  my_mongodb_1:
    image: mongo:8.0.0
    hostname: my_mongodb_1
    container_name: my_mongodb_1
    # command:
    #   - /bin/sh
    #   - -c
    #   - |
    #    chmod 400 /etc/mongodb.key
    #    chown 999:999 /etc/mongodb.key
    #    mongod --replSet rs0 --keyFile /etc/mongodb.key --bind_ip_all
    # command: ["mongod", "--config", "/etc/mongod.conf"]
    # command: ["mongod", "--replSet", "rs0", "--keyFile", "/etc/mongodb.key", "--config" ,"/etc/mongod.conf"]
    # command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    command: [mongod, --replSet, rs0, --keyFile, /etc/mongodb.key, --bind_ip_all, --port, "27017"]
    # healthcheck:
    #   test: test $$(mongosh --port 27017 --quiet --eval "try {rs.initiate({})} catch(e) {rs.status().ok}") -eq 1
    #   interval: 10s
    #   start_period: 30s
    ports:
      - 27017:27017
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - MONGO_INITDB_DATABASE=admin
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    volumes:
      # - ./volume/mongo/internal/db:/data/db
      # - ./volume/mongo/internal/configdb:/data/configdb
      - ./volume/mongo/external/mongod.conf:/etc/mongod.conf
      - ./volume/mongo/external/mongodb.key:/etc/mongodb.key


  mongodb_setup:
    image: mongo:8.0.0
    container_name: mongodb_setup
    hostname: mongodb_setup
    restart: 'no'
    command: >
      mongosh mongodb://admin:admin@my_mongodb_1:27017/?replicaSet=rs0&directConnection=true
      '
      rs.slaveOk();
      rs.initiate();
      '
    depends_on:
      - my_mongodb_1


  # my_mongodb_2:
  #   image: mongo:8.0.0
  #   hostname: my_mongodb_2
  #   container_name: my_mongodb_2
  #   command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
  #   ports:
  #     - 27018:27018
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"

  # zoo_ui: 
  #   image: elkozmon/zoonavigator:latest
  #   container_name: zoo_ui
  #   hostname: zoo_ui
  #   restart: always
  #   ports:
  #     - 9000:9000
  #   environment:
  #     HTTP_PORT: 9000
  #   depends_on:
  #     - my_zk
  #     - my_kafka_1

  # kafka_ui:
  #   container_name: kafka_ui
  #   hostname: kafka_ui
  #   image: provectuslabs/kafka-ui:latest
  #   ports:
  #     - 9100:8080
  #   environment:
  #     DYNAMIC_CONFIG_ENABLED: 'true'
  #   depends_on:
  #     - my_zk
  #     - my_kafka_1

  # dbzm_ui:
  #   image: debezium/debezium-ui:latest
  #   restart: always
  #   container_name: dbzm_ui
  #   hostname: dbzm_ui
  #   depends_on:
  #    - my_dbzm
  #   ports:
  #     - '8844:8080'
  #   environment:
  #     KAFKA_CONNECT_URIS: http://my_dbzm:8083

volumes:
  my_mongo_data:
  my_mongo_conf: