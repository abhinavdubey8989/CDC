{
    "name": "io.debezium.connector.mongodb.MongoDbConnector",
    "error_count": 0,
    "groups": [
        "Common",
        "Transforms",
        "Predicates",
        "Error Handling",
        "Topic Creation",
        "Exactly Once Support",
        "offsets.topic",
        "MongoDB",
        "Connector",
        "Events"
    ],
    "configs": [
        {
            "definition": {
                "name": "name",
                "type": "STRING",
                "required": true,
                "default_value": null,
                "importance": "HIGH",
                "documentation": "Globally unique name to use for this connector.",
                "group": "Common",
                "width": "MEDIUM",
                "display_name": "Connector name",
                "dependents": [],
                "order": 1
            },
            "value": {
                "name": "name",
                "value": "my_mongo_cdc_01",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "connector.class",
                "type": "STRING",
                "required": true,
                "default_value": null,
                "importance": "HIGH",
                "documentation": "Name or alias of the class for this connector. Must be a subclass of org.apache.kafka.connect.connector.Connector. If the connector is org.apache.kafka.connect.file.FileStreamSinkConnector, you can either specify this full name,  or use \"FileStreamSink\" or \"FileStreamSinkConnector\" to make the configuration a bit shorter",
                "group": "Common",
                "width": "LONG",
                "display_name": "Connector class",
                "dependents": [],
                "order": 2
            },
            "value": {
                "name": "connector.class",
                "value": "io.debezium.connector.mongodb.MongoDbConnector",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "tasks.max",
                "type": "INT",
                "required": false,
                "default_value": "1",
                "importance": "HIGH",
                "documentation": "Maximum number of tasks to use for this connector.",
                "group": "Common",
                "width": "SHORT",
                "display_name": "Tasks max",
                "dependents": [],
                "order": 3
            },
            "value": {
                "name": "tasks.max",
                "value": "1",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "key.converter",
                "type": "CLASS",
                "required": false,
                "default_value": null,
                "importance": "LOW",
                "documentation": "Converter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the keys in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro.",
                "group": "Common",
                "width": "SHORT",
                "display_name": "Key converter class",
                "dependents": [],
                "order": 4
            },
            "value": {
                "name": "key.converter",
                "value": "org.apache.kafka.connect.json.JsonConverter",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "value.converter",
                "type": "CLASS",
                "required": false,
                "default_value": null,
                "importance": "LOW",
                "documentation": "Converter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the values in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro.",
                "group": "Common",
                "width": "SHORT",
                "display_name": "Value converter class",
                "dependents": [],
                "order": 5
            },
            "value": {
                "name": "value.converter",
                "value": "org.apache.kafka.connect.json.JsonConverter",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "header.converter",
                "type": "CLASS",
                "required": false,
                "default_value": null,
                "importance": "LOW",
                "documentation": "HeaderConverter class used to convert between Kafka Connect format and the serialized form that is written to Kafka. This controls the format of the header values in messages written to or read from Kafka, and since this is independent of connectors it allows any connector to work with any serialization format. Examples of common formats include JSON and Avro. By default, the SimpleHeaderConverter is used to serialize header values to strings and deserialize them by inferring the schemas.",
                "group": "Common",
                "width": "SHORT",
                "display_name": "Header converter class",
                "dependents": [],
                "order": 6
            },
            "value": {
                "name": "header.converter",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "transforms",
                "type": "LIST",
                "required": false,
                "default_value": "",
                "importance": "LOW",
                "documentation": "Aliases for the transformations to be applied to records.",
                "group": "Transforms",
                "width": "LONG",
                "display_name": "Transforms",
                "dependents": [],
                "order": 7
            },
            "value": {
                "name": "transforms",
                "value": "",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "predicates",
                "type": "LIST",
                "required": false,
                "default_value": "",
                "importance": "LOW",
                "documentation": "Aliases for the predicates used by transformations.",
                "group": "Predicates",
                "width": "LONG",
                "display_name": "Predicates",
                "dependents": [],
                "order": 8
            },
            "value": {
                "name": "predicates",
                "value": "",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "config.action.reload",
                "type": "STRING",
                "required": false,
                "default_value": "restart",
                "importance": "LOW",
                "documentation": "The action that Connect should take on the connector when changes in external configuration providers result in a change in the connector's configuration properties. A value of 'none' indicates that Connect will do nothing. A value of 'restart' indicates that Connect should restart/reload the connector with the updated configuration properties.The restart may actually be scheduled in the future if the external configuration provider indicates that a configuration value will expire in the future.",
                "group": "Common",
                "width": "MEDIUM",
                "display_name": "Reload Action",
                "dependents": [],
                "order": 9
            },
            "value": {
                "name": "config.action.reload",
                "value": "restart",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "errors.retry.timeout",
                "type": "LONG",
                "required": false,
                "default_value": "0",
                "importance": "MEDIUM",
                "documentation": "The maximum duration in milliseconds that a failed operation will be reattempted. The default is 0, which means no retries will be attempted. Use -1 for infinite retries.",
                "group": "Error Handling",
                "width": "MEDIUM",
                "display_name": "Retry Timeout for Errors",
                "dependents": [],
                "order": 1
            },
            "value": {
                "name": "errors.retry.timeout",
                "value": "0",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "errors.retry.delay.max.ms",
                "type": "LONG",
                "required": false,
                "default_value": "60000",
                "importance": "MEDIUM",
                "documentation": "The maximum duration in milliseconds between consecutive retry attempts. Jitter will be added to the delay once this limit is reached to prevent thundering herd issues.",
                "group": "Error Handling",
                "width": "MEDIUM",
                "display_name": "Maximum Delay Between Retries for Errors",
                "dependents": [],
                "order": 2
            },
            "value": {
                "name": "errors.retry.delay.max.ms",
                "value": "60000",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "errors.tolerance",
                "type": "STRING",
                "required": false,
                "default_value": "none",
                "importance": "MEDIUM",
                "documentation": "Behavior for tolerating errors during connector operation. 'none' is the default value and signals that any error will result in an immediate connector task failure; 'all' changes the behavior to skip over problematic records.",
                "group": "Error Handling",
                "width": "SHORT",
                "display_name": "Error Tolerance",
                "dependents": [],
                "order": 3
            },
            "value": {
                "name": "errors.tolerance",
                "value": "all",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "errors.log.enable",
                "type": "BOOLEAN",
                "required": false,
                "default_value": "false",
                "importance": "MEDIUM",
                "documentation": "If true, write each error and the details of the failed operation and problematic record to the Connect application log. This is 'false' by default, so that only errors that are not tolerated are reported.",
                "group": "Error Handling",
                "width": "SHORT",
                "display_name": "Log Errors",
                "dependents": [],
                "order": 4
            },
            "value": {
                "name": "errors.log.enable",
                "value": "false",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "errors.log.include.messages",
                "type": "BOOLEAN",
                "required": false,
                "default_value": "false",
                "importance": "MEDIUM",
                "documentation": "Whether to include in the log the Connect record that resulted in a failure.For sink records, the topic, partition, offset, and timestamp will be logged. For source records, the key and value (and their schemas), all headers, and the timestamp, Kafka topic, Kafka partition, source partition, and source offset will be logged. This is 'false' by default, which will prevent record keys, values, and headers from being written to log files.",
                "group": "Error Handling",
                "width": "SHORT",
                "display_name": "Log Error Details",
                "dependents": [],
                "order": 5
            },
            "value": {
                "name": "errors.log.include.messages",
                "value": "false",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "topic.creation.groups",
                "type": "LIST",
                "required": false,
                "default_value": "",
                "importance": "LOW",
                "documentation": "Groups of configurations for topics created by source connectors",
                "group": "Topic Creation",
                "width": "LONG",
                "display_name": "Topic Creation Groups",
                "dependents": [],
                "order": 1
            },
            "value": {
                "name": "topic.creation.groups",
                "value": "",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "exactly.once.support",
                "type": "STRING",
                "required": false,
                "default_value": "requested",
                "importance": "MEDIUM",
                "documentation": "Permitted values are requested, required. If set to \"required\", forces a preflight check for the connector to ensure that it can provide exactly-once delivery with the given configuration. Some connectors may be capable of providing exactly-once delivery but not signal to Connect that they support this; in that case, documentation for the connector should be consulted carefully before creating it, and the value for this property should be set to \"requested\". Additionally, if the value is set to \"required\" but the worker that performs preflight validation does not have exactly-once support enabled for source connectors, requests to create or validate the connector will fail.",
                "group": "Exactly Once Support",
                "width": "SHORT",
                "display_name": "Exactly once support",
                "dependents": [],
                "order": 2
            },
            "value": {
                "name": "exactly.once.support",
                "value": "requested",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "transaction.boundary",
                "type": "STRING",
                "required": false,
                "default_value": "poll",
                "importance": "MEDIUM",
                "documentation": "Permitted values are: poll, interval, connector. If set to 'poll', a new producer transaction will be started and committed for every batch of records that each task from this connector provides to Connect. If set to 'connector', relies on connector-defined transaction boundaries; note that not all connectors are capable of defining their own transaction boundaries, and in that case, attempts to instantiate a connector with this value will fail. Finally, if set to 'interval', commits transactions only after a user-defined time interval has passed.",
                "group": "Exactly Once Support",
                "width": "SHORT",
                "display_name": "Transaction Boundary",
                "dependents": [],
                "order": 3
            },
            "value": {
                "name": "transaction.boundary",
                "value": "poll",
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "transaction.boundary.interval.ms",
                "type": "LONG",
                "required": false,
                "default_value": null,
                "importance": "LOW",
                "documentation": "If 'transaction.boundary' is set to 'interval', determines the interval for producer transaction commits by connector tasks. If unset, defaults to the value of the worker-level 'offset.flush.interval.ms' property. It has no effect if a different transaction.boundary is specified.",
                "group": "Exactly Once Support",
                "width": "SHORT",
                "display_name": "Transaction boundary interval",
                "dependents": [],
                "order": 4
            },
            "value": {
                "name": "transaction.boundary.interval.ms",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "offsets.storage.topic",
                "type": "STRING",
                "required": false,
                "default_value": null,
                "importance": "LOW",
                "documentation": "The name of a separate offsets topic to use for this connector. If empty or not specified, the worker’s global offsets topic name will be used. If specified, the offsets topic will be created if it does not already exist on the Kafka cluster targeted by this connector (which may be different from the one used for the worker's global offsets topic if the bootstrap.servers property of the connector's producer has been overridden from the worker's). Only applicable in distributed mode; in standalone mode, setting this property will have no effect.",
                "group": "offsets.topic",
                "width": "LONG",
                "display_name": "Offsets topic",
                "dependents": [],
                "order": 1
            },
            "value": {
                "name": "offsets.storage.topic",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "topic.prefix",
                "type": "STRING",
                "required": false,
                "default_value": null,
                "importance": "HIGH",
                "documentation": "Topic prefix that identifies and provides a namespace for the particular database server/cluster is capturing changes. The topic prefix should be unique across all other connectors, since it is used as a prefix for all Kafka topic names that receive events emitted by this connector. Only alphanumeric characters, hyphens, dots and underscores must be accepted.",
                "group": "MongoDB",
                "width": "MEDIUM",
                "display_name": "Topic prefix",
                "dependents": [],
                "order": 1
            },
            "value": {
                "name": "topic.prefix",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "mongodb.connection.string",
                "type": "STRING",
                "required": false,
                "default_value": null,
                "importance": "HIGH",
                "documentation": "Database connection string.",
                "group": "MongoDB",
                "width": "MEDIUM",
                "display_name": "Connection String",
                "dependents": [],
                "order": 2
            },
            "value": {
                "name": "mongodb.connection.string",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "mongodb.hosts",
                "type": "LIST",
                "required": false,
                "default_value": null,
                "importance": "HIGH",
                "documentation": "The hostname and port pairs (in the form 'host' or 'host:port') of the MongoDB server(s) in the replica set.",
                "group": "MongoDB",
                "width": "LONG",
                "display_name": "Hosts",
                "dependents": [],
                "order": 3
            },
            "value": {
                "name": "mongodb.hosts",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "mongodb.user",
                "type": "STRING",
                "required": false,
                "default_value": null,
                "importance": "HIGH",
                "documentation": "Database user for connecting to MongoDB, if necessary.",
                "group": "MongoDB",
                "width": "SHORT",
                "display_name": "User",
                "dependents": [],
                "order": 4
            },
            "value": {
                "name": "mongodb.user",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "mongodb.password",
                "type": "PASSWORD",
                "required": false,
                "default_value": null,
                "importance": "HIGH",
                "documentation": "Password to be used when connecting to MongoDB, if necessary.",
                "group": "MongoDB",
                "width": "SHORT",
                "display_name": "Password",
                "dependents": [],
                "order": 5
            },
            "value": {
                "name": "mongodb.password",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "mongodb.authsource",
                "type": "STRING",
                "required": false,
                "default_value": "admin",
                "importance": "MEDIUM",
                "documentation": "Database containing user credentials.",
                "group": "MongoDB",
                "width": "SHORT",
                "display_name": "Credentials Database",
                "dependents": [],
                "order": 6
            },
            "value": {
                "name": "mongodb.authsource",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "connect.backoff.initial.delay.ms",
                "type": "LONG",
                "required": false,
                "default_value": "1000",
                "importance": "MEDIUM",
                "documentation": "The initial delay when trying to reconnect to a primary after a connection cannot be made or when no primary is available, given in milliseconds. Defaults to 1 second (1,000 ms).",
                "group": "MongoDB",
                "width": "SHORT",
                "display_name": "Initial delay before reconnection (ms)",
                "dependents": [],
                "order": 7
            },
            "value": {
                "name": "connect.backoff.initial.delay.ms",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "connect.backoff.max.delay.ms",
                "type": "LONG",
                "required": false,
                "default_value": "120000",
                "importance": "MEDIUM",
                "documentation": "The maximum delay when trying to reconnect to a primary after a connection cannot be made or when no primary is available, given in milliseconds. Defaults to 120 second (120,000 ms).",
                "group": "MongoDB",
                "width": "SHORT",
                "display_name": "Maximum delay before reconnection (ms)",
                "dependents": [],
                "order": 8
            },
            "value": {
                "name": "connect.backoff.max.delay.ms",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "mongodb.connect.timeout.ms",
                "type": "INT",
                "required": false,
                "default_value": "10000",
                "importance": "LOW",
                "documentation": "The connection timeout, given in milliseconds. Defaults to 10 seconds (10,000 ms).",
                "group": "MongoDB",
                "width": "SHORT",
                "display_name": "Connect Timeout MS",
                "dependents": [],
                "order": 9
            },
            "value": {
                "name": "mongodb.connect.timeout.ms",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "mongodb.heartbeat.frequency.ms",
                "type": "INT",
                "required": false,
                "default_value": "10000",
                "importance": "LOW",
                "documentation": "The frequency that the cluster monitor attempts to reach each server. Defaults to 10 seconds (10,000 ms).",
                "group": "MongoDB",
                "width": "SHORT",
                "display_name": "Heartbeat frequency ms",
                "dependents": [],
                "order": 10
            },
            "value": {
                "name": "mongodb.heartbeat.frequency.ms",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "mongodb.socket.timeout.ms",
                "type": "INT",
                "required": false,
                "default_value": "0",
                "importance": "LOW",
                "documentation": "The socket timeout, given in milliseconds. Defaults to 0 ms.",
                "group": "MongoDB",
                "width": "SHORT",
                "display_name": "Socket timeout MS",
                "dependents": [],
                "order": 11
            },
            "value": {
                "name": "mongodb.socket.timeout.ms",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "mongodb.server.selection.timeout.ms",
                "type": "INT",
                "required": false,
                "default_value": "30000",
                "importance": "LOW",
                "documentation": "The server selection timeout, given in milliseconds. Defaults to 10 seconds (10,000 ms).",
                "group": "MongoDB",
                "width": "SHORT",
                "display_name": "Server selection timeout MS",
                "dependents": [],
                "order": 12
            },
            "value": {
                "name": "mongodb.server.selection.timeout.ms",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "mongodb.poll.interval.ms",
                "type": "LONG",
                "required": false,
                "default_value": "30000",
                "importance": "MEDIUM",
                "documentation": "Interval for looking for new, removed, or changed replica sets, given in milliseconds. Defaults to 30 seconds (30,000 ms).",
                "group": "MongoDB",
                "width": "SHORT",
                "display_name": "Replica membership poll interval (ms)",
                "dependents": [],
                "order": 13
            },
            "value": {
                "name": "mongodb.poll.interval.ms",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "connect.max.attempts",
                "type": "INT",
                "required": false,
                "default_value": "16",
                "importance": "HIGH",
                "documentation": "Maximum number of failed connection attempts to a replica set primary before an exception occurs and task is aborted. Defaults to 16, which with the defaults for 'connect.backoff.initial.delay.ms' and 'connect.backoff.max.delay.ms' results in just over 20 minutes of attempts before failing.",
                "group": "MongoDB",
                "width": "SHORT",
                "display_name": "Connection attempt limit",
                "dependents": [],
                "order": 14
            },
            "value": {
                "name": "connect.max.attempts",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "mongodb.members.auto.discover",
                "type": "BOOLEAN",
                "required": false,
                "default_value": "true",
                "importance": "LOW",
                "documentation": "Specifies whether the addresses in 'hosts' are seeds that should be used to discover all members of the cluster or replica set ('true'), or whether the address(es) in 'hosts' should be used as is ('false'). The default is 'true'.",
                "group": "MongoDB",
                "width": "SHORT",
                "display_name": "Auto-discovery",
                "dependents": [],
                "order": 15
            },
            "value": {
                "name": "mongodb.members.auto.discover",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "mongodb.ssl.enabled",
                "type": "BOOLEAN",
                "required": false,
                "default_value": "false",
                "importance": "MEDIUM",
                "documentation": "Should connector use SSL to connect to MongoDB instances",
                "group": "MongoDB",
                "width": "SHORT",
                "display_name": "Enable SSL connection to MongoDB",
                "dependents": [],
                "order": 16
            },
            "value": {
                "name": "mongodb.ssl.enabled",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "mongodb.ssl.invalid.hostname.allowed",
                "type": "BOOLEAN",
                "required": false,
                "default_value": "false",
                "importance": "MEDIUM",
                "documentation": "Whether invalid host names are allowed when using SSL. If true the connection will not prevent man-in-the-middle attacks",
                "group": "MongoDB",
                "width": "SHORT",
                "display_name": "Allow invalid hostnames for SSL connection",
                "dependents": [],
                "order": 17
            },
            "value": {
                "name": "mongodb.ssl.invalid.hostname.allowed",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "cursor.max.await.time.ms",
                "type": "INT",
                "required": false,
                "default_value": null,
                "importance": "LOW",
                "documentation": "The maximum processing time in milliseconds to wait for the oplog cursor to process a single poll request",
                "group": "MongoDB",
                "width": "SHORT",
                "display_name": "Server's oplog streaming cursor max await time",
                "dependents": [],
                "order": 18
            },
            "value": {
                "name": "cursor.max.await.time.ms",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "event.processing.failure.handling.mode",
                "type": "STRING",
                "required": false,
                "default_value": "fail",
                "importance": "MEDIUM",
                "documentation": "Specify how failures during processing of events (i.e. when encountering a corrupted event) should be handled, including: 'fail' (the default) an exception indicating the problematic event and its position is raised, causing the connector to be stopped; 'warn' the problematic event and its position will be logged and the event will be skipped; 'ignore' the problematic event will be skipped.",
                "group": "Connector",
                "width": "SHORT",
                "display_name": "Event deserialization failure handling",
                "dependents": [],
                "order": 1
            },
            "value": {
                "name": "event.processing.failure.handling.mode",
                "value": null,
                "recommended_values": [
                    "warn",
                    "fail",
                    "ignore",
                    "skip"
                ],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "max.batch.size",
                "type": "INT",
                "required": false,
                "default_value": "2048",
                "importance": "MEDIUM",
                "documentation": "Maximum size of each batch of source records. Defaults to 2048.",
                "group": "Connector",
                "width": "SHORT",
                "display_name": "Change event batch size",
                "dependents": [],
                "order": 2
            },
            "value": {
                "name": "max.batch.size",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "max.queue.size",
                "type": "INT",
                "required": false,
                "default_value": "8192",
                "importance": "MEDIUM",
                "documentation": "Maximum size of the queue for change events read from the database log but not yet recorded or forwarded. Defaults to 8192, and should always be larger than the maximum batch size.",
                "group": "Connector",
                "width": "SHORT",
                "display_name": "Change event buffer size",
                "dependents": [],
                "order": 3
            },
            "value": {
                "name": "max.queue.size",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "poll.interval.ms",
                "type": "LONG",
                "required": false,
                "default_value": "500",
                "importance": "MEDIUM",
                "documentation": "Time to wait for new change events to appear after receiving no events, given in milliseconds. Defaults to 500 ms.",
                "group": "Connector",
                "width": "SHORT",
                "display_name": "Poll interval (ms)",
                "dependents": [],
                "order": 4
            },
            "value": {
                "name": "poll.interval.ms",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "max.queue.size.in.bytes",
                "type": "LONG",
                "required": false,
                "default_value": "0",
                "importance": "MEDIUM",
                "documentation": "Maximum size of the queue in bytes for change events read from the database log but not yet recorded or forwarded. Defaults to 0. Mean the feature is not enabled",
                "group": "Connector",
                "width": "LONG",
                "display_name": "Change event buffer size in bytes",
                "dependents": [],
                "order": 5
            },
            "value": {
                "name": "max.queue.size.in.bytes",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "provide.transaction.metadata",
                "type": "BOOLEAN",
                "required": false,
                "default_value": "false",
                "importance": "LOW",
                "documentation": "Enables transaction metadata extraction together with event counting",
                "group": "Connector",
                "width": "SHORT",
                "display_name": "Store transaction metadata information in a dedicated topic.",
                "dependents": [],
                "order": 6
            },
            "value": {
                "name": "provide.transaction.metadata",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "skipped.operations",
                "type": "LIST",
                "required": false,
                "default_value": "t",
                "importance": "LOW",
                "documentation": "The comma-separated list of operations to skip during streaming, defined as: 'c' for inserts/create; 'u' for updates; 'd' for deletes, 't' for truncates, and 'none' to indicate nothing skipped. By default, only truncate operations will be skipped.",
                "group": "Connector",
                "width": "SHORT",
                "display_name": "Skipped Operations",
                "dependents": [],
                "order": 7
            },
            "value": {
                "name": "skipped.operations",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "snapshot.delay.ms",
                "type": "LONG",
                "required": false,
                "default_value": "0",
                "importance": "LOW",
                "documentation": "A delay period before a snapshot will begin, given in milliseconds. Defaults to 0 ms.",
                "group": "Connector",
                "width": "MEDIUM",
                "display_name": "Snapshot Delay (milliseconds)",
                "dependents": [],
                "order": 8
            },
            "value": {
                "name": "snapshot.delay.ms",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "snapshot.include.collection.list",
                "type": "LIST",
                "required": false,
                "default_value": null,
                "importance": "MEDIUM",
                "documentation": "This setting must be set to specify a list of tables/collections whose snapshot must be taken on creating or restarting the connector.",
                "group": "Connector",
                "width": "LONG",
                "display_name": "Snapshot mode include data collection",
                "dependents": [],
                "order": 9
            },
            "value": {
                "name": "snapshot.include.collection.list",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "snapshot.fetch.size",
                "type": "INT",
                "required": false,
                "default_value": null,
                "importance": "MEDIUM",
                "documentation": "The maximum number of records that should be loaded into memory while performing a snapshot.",
                "group": "Connector",
                "width": "MEDIUM",
                "display_name": "Snapshot fetch size",
                "dependents": [],
                "order": 10
            },
            "value": {
                "name": "snapshot.fetch.size",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "snapshot.max.threads",
                "type": "INT",
                "required": false,
                "default_value": "1",
                "importance": "MEDIUM",
                "documentation": "The maximum number of threads used to perform the snapshot. Defaults to 1.",
                "group": "Connector",
                "width": "SHORT",
                "display_name": "Snapshot maximum threads",
                "dependents": [],
                "order": 11
            },
            "value": {
                "name": "snapshot.max.threads",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "retriable.restart.connector.wait.ms",
                "type": "LONG",
                "required": false,
                "default_value": "10000",
                "importance": "LOW",
                "documentation": "Time to wait before restarting connector after retriable exception occurs. Defaults to 10000ms.",
                "group": "Connector",
                "width": "MEDIUM",
                "display_name": "Retriable restart wait (ms)",
                "dependents": [],
                "order": 12
            },
            "value": {
                "name": "retriable.restart.connector.wait.ms",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "query.fetch.size",
                "type": "INT",
                "required": false,
                "default_value": "0",
                "importance": "MEDIUM",
                "documentation": "The maximum number of records that should be loaded into memory while streaming. A value of '0' uses the default JDBC fetch size.",
                "group": "Connector",
                "width": "MEDIUM",
                "display_name": "Query fetch size",
                "dependents": [],
                "order": 13
            },
            "value": {
                "name": "query.fetch.size",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "snapshot.mode",
                "type": "STRING",
                "required": false,
                "default_value": "initial",
                "importance": "LOW",
                "documentation": "The criteria for running a snapshot upon startup of the connector. Options include: 'initial' (the default) to specify the connector should always perform an initial sync when required; 'never' to specify the connector should never perform an initial sync ",
                "group": "Connector",
                "width": "SHORT",
                "display_name": "Snapshot mode",
                "dependents": [],
                "order": 14
            },
            "value": {
                "name": "snapshot.mode",
                "value": null,
                "recommended_values": [
                    "never",
                    "initial"
                ],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "capture.mode",
                "type": "STRING",
                "required": false,
                "default_value": "change_streams_update_full",
                "importance": "MEDIUM",
                "documentation": "The method used to capture changes from MongoDB server. Options include: 'change_streams' to capture changes via MongoDB Change Streams, update events do not contain full documents; 'change_streams_update_full' (the default) to capture changes via MongoDB Change Streams, update events contain full documents",
                "group": "Connector",
                "width": "SHORT",
                "display_name": "Capture mode",
                "dependents": [],
                "order": 15
            },
            "value": {
                "name": "capture.mode",
                "value": null,
                "recommended_values": [
                    "change_streams",
                    "change_streams_update_full",
                    "change_streams_with_pre_image",
                    "change_streams_update_full_with_pre_image"
                ],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "schema.name.adjustment.mode",
                "type": "STRING",
                "required": false,
                "default_value": "none",
                "importance": "LOW",
                "documentation": "Specify how schema names should be adjusted for compatibility with the message converter used by the connector, including: 'avro' replaces the characters that cannot be used in the Avro type name with underscore; 'none' does not apply any adjustment (default)",
                "group": "Connector",
                "width": "MEDIUM",
                "display_name": "Schema Name Adjustment",
                "dependents": [],
                "order": 16
            },
            "value": {
                "name": "schema.name.adjustment.mode",
                "value": null,
                "recommended_values": [
                    "none",
                    "avro"
                ],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "converters",
                "type": "STRING",
                "required": false,
                "default_value": null,
                "importance": "LOW",
                "documentation": "Optional list of custom converters that would be used instead of default ones. The converters are defined using '<converter.prefix>.type' config option and configured using options '<converter.prefix>.<option>'",
                "group": "Events",
                "width": "MEDIUM",
                "display_name": "List of prefixes defining custom values converters.",
                "dependents": [],
                "order": 1
            },
            "value": {
                "name": "converters",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "sanitize.field.names",
                "type": "BOOLEAN",
                "required": false,
                "default_value": "false",
                "importance": "LOW",
                "documentation": "Whether field names will be sanitized to Avro naming conventions",
                "group": "Events",
                "width": "SHORT",
                "display_name": "Sanitize field names to adhere to Avro naming conventions",
                "dependents": [],
                "order": 2
            },
            "value": {
                "name": "sanitize.field.names",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "tombstones.on.delete",
                "type": "BOOLEAN",
                "required": false,
                "default_value": "true",
                "importance": "MEDIUM",
                "documentation": "Whether delete operations should be represented by a delete event and a subsequent tombstone event (true) or only by a delete event (false). Emitting the tombstone event (the default behavior) allows Kafka to completely delete all events pertaining to the given key once the source record got deleted.",
                "group": "Events",
                "width": "SHORT",
                "display_name": "Change the behaviour of Debezium with regards to delete operations",
                "dependents": [],
                "order": 3
            },
            "value": {
                "name": "tombstones.on.delete",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "heartbeat.interval.ms",
                "type": "INT",
                "required": false,
                "default_value": "0",
                "importance": "MEDIUM",
                "documentation": "Length of an interval in milli-seconds in in which the connector periodically sends heartbeat messages to a heartbeat topic. Use 0 to disable heartbeat messages. Disabled by default.",
                "group": "Events",
                "width": "MEDIUM",
                "display_name": "Connector heartbeat interval (milli-seconds)",
                "dependents": [],
                "order": 4
            },
            "value": {
                "name": "heartbeat.interval.ms",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "heartbeat.topics.prefix",
                "type": "STRING",
                "required": false,
                "default_value": "__debezium-heartbeat",
                "importance": "LOW",
                "documentation": "The prefix that is used to name heartbeat topics.Defaults to __debezium-heartbeat.",
                "group": "Events",
                "width": "MEDIUM",
                "display_name": "A prefix used for naming of heartbeat topics",
                "dependents": [],
                "order": 5
            },
            "value": {
                "name": "heartbeat.topics.prefix",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "signal.data.collection",
                "type": "STRING",
                "required": false,
                "default_value": null,
                "importance": "MEDIUM",
                "documentation": "The name of the data collection that is used to send signals/commands to Debezium. Signaling is disabled when not set.",
                "group": "Events",
                "width": "MEDIUM",
                "display_name": "Signaling data collection",
                "dependents": [],
                "order": 6
            },
            "value": {
                "name": "signal.data.collection",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "topic.naming.strategy",
                "type": "CLASS",
                "required": false,
                "default_value": "io.debezium.schema.SchemaTopicNamingStrategy",
                "importance": "MEDIUM",
                "documentation": "The name of the TopicNamingStrategy class that should be used to determine the topic name for data change, schema change, transaction, heartbeat event etc.",
                "group": "Events",
                "width": "MEDIUM",
                "display_name": "Topic naming strategy class",
                "dependents": [],
                "order": 7
            },
            "value": {
                "name": "topic.naming.strategy",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "database.include.list",
                "type": "LIST",
                "required": false,
                "default_value": null,
                "importance": "HIGH",
                "documentation": "A comma-separated list of regular expressions that match the database names for which changes are to be captured",
                "group": "Events",
                "width": "LONG",
                "display_name": "Include Databases",
                "dependents": [],
                "order": 8
            },
            "value": {
                "name": "database.include.list",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "database.exclude.list",
                "type": "LIST",
                "required": false,
                "default_value": null,
                "importance": "HIGH",
                "documentation": "A comma-separated list of regular expressions that match the database names for which changes are to be excluded",
                "group": "Events",
                "width": "LONG",
                "display_name": "Exclude Databases",
                "dependents": [],
                "order": 9
            },
            "value": {
                "name": "database.exclude.list",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "collection.include.list",
                "type": "LIST",
                "required": false,
                "default_value": null,
                "importance": "HIGH",
                "documentation": "A comma-separated list of regular expressions that match the collection names for which changes are to be captured",
                "group": "Events",
                "width": "LONG",
                "display_name": "Include Collections",
                "dependents": [],
                "order": 10
            },
            "value": {
                "name": "collection.include.list",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "collection.exclude.list",
                "type": "STRING",
                "required": false,
                "default_value": null,
                "importance": "MEDIUM",
                "documentation": "A comma-separated list of regular expressions that match the collection names for which changes are to be excluded",
                "group": "Events",
                "width": "NONE",
                "display_name": null,
                "dependents": [],
                "order": 11
            },
            "value": {
                "name": "collection.exclude.list",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": false
            }
        },
        {
            "definition": {
                "name": "field.exclude.list",
                "type": "STRING",
                "required": false,
                "default_value": null,
                "importance": "MEDIUM",
                "documentation": "A comma-separated list of the fully-qualified names of fields that should be excluded from change event message values",
                "group": "Events",
                "width": "LONG",
                "display_name": "Exclude Fields",
                "dependents": [],
                "order": 12
            },
            "value": {
                "name": "field.exclude.list",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "field.renames",
                "type": "STRING",
                "required": false,
                "default_value": null,
                "importance": "MEDIUM",
                "documentation": "A comma-separated list of the fully-qualified replacements of fields that should be used to rename fields in change event message values. Fully-qualified replacements for fields are of the form databaseName.collectionName.fieldName.nestedFieldName:newNestedFieldName, where databaseName and collectionName may contain the wildcard (*) which matches any characters, the colon character (:) is used to determine rename mapping of field.",
                "group": "Events",
                "width": "LONG",
                "display_name": "Rename Fields",
                "dependents": [],
                "order": 13
            },
            "value": {
                "name": "field.renames",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        },
        {
            "definition": {
                "name": "snapshot.collection.filter.overrides",
                "type": "STRING",
                "required": false,
                "default_value": null,
                "importance": "MEDIUM",
                "documentation": "This property contains a comma-separated list of <dbName>.<collectionName>, for which  the initial snapshot may be a subset of data present in the data source. The subset would be defined by mongodb filter query specified as value for property snapshot.collection.filter.override.<dbname>.<collectionName>",
                "group": "Events",
                "width": "LONG",
                "display_name": "Snapshot mode",
                "dependents": [],
                "order": 14
            },
            "value": {
                "name": "snapshot.collection.filter.overrides",
                "value": null,
                "recommended_values": [],
                "errors": [],
                "visible": true
            }
        }
    ]
}